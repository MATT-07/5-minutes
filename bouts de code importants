#Liste des bouts de code :

* fonction courrir vers le haut
* timer
* code de Adriel
* fonction de collisions
* exemple de code vide
* (ancienne) fonction de collisions

----------------------------------------------------------------------------

#courir (vers le haut avec touche modif : control) : 

    if pyxel.btn(pyxel.KEY_UP) and pyxel.btn(pyxel.KEY_CTRL):
        if (y > 0) :
            y = y - 2
            
----------------------------------------------------------------------------
         
#chronomètre tentative 1568648348354 : 

import pyxel
import random

pyxel.init(64, 64)
trentièmes = 30
secondes = 10
minutes = 0

def update() :
    global trentièmes,secondes,minutes
    
    
    trentièmes -= 1
    if trentièmes == 0 :
        secondes -= 1
        trentièmes = 30
        
    if secondes == 0 :
        minutes -= 1
        secondes = 59
    
def draw() :
    global trentièmes,secondes,minutes
    
    pyxel.cls(0)
    
    if minutes >= 0 :
        pyxel.text(0, 32, "Timer :"+ str(minutes)+":"+ str(secondes), 7)
    else :
        pyxel.text(0, 32, "termine", 7)

pyxel.run(update, draw)

----------------------------------------------------------------------------

#code de Adriel :

import pyxel
import random

pyxel.init(60*16, 20*16)
h = 320 
l = 960 #dimensions de la fenêtre
hmax = 216
hmin = 152 #coordonées maximales et minimales de déplacement
x,y = 22,22 #coordonnées du personnage
niveau = 1 #variable pour savoir dans quel niveau on se trouve
casier = 0
m = 0

def deplacement(x,y):
    global hmin,hmax
    if pyxel.btn(pyxel.KEY_RIGHT):
        if x < l and y >= hmin :
            x = x + 2
    if pyxel.btn(pyxel.KEY_LEFT):
        if x > 0 and y >= hmin :
            x = x - 2
    if pyxel.btn(pyxel.KEY_DOWN):
        if y < hmax:
            y = y+2
    if pyxel.btn(pyxel.KEY_UP):
        if y > hmin :
            y = y-2
    return x, y #fonction de déplacement avec les flèches du clavier à l'intérieur des coordonnées de déplacement
    

            
 #/////////////////////////////
    #if x == 64*8:

     #m = random.randint(1,3)
      #      if m == 3:
       #        pyxel.rect(5,hmax-1*20, 16, 16, 9) 
            


def update():
    global x, y
    x,y = deplacement(x,y) #fonction de mise à jour des coordonnées du personnage en fonction des touches appuyées, à l'aide de la fonction deplacement

def draw():
    global x,y,niveau,hmin,hmax,casier,m
    if niveau ==  1 :
        pyxel.cls(0)
        
        #pyxel.text(120, 5, "m ="+ str(m), 8) afficher la variable m pour être sûr qu'elle marche bien
        
        if 64*8-2 <= x <= 64*8+2: #Piege quand il passe a 64*8 il y a  30% de chance de perdre
            m = random.randint(1,3)
            if m == 3: #choisit un nombre entre 1 et 3, si il est égal à 3, éxecute cette boucle, il y a donc 1/3 de chances qu'elle soit éxécutée
                pyxel.rect(5,5, 50, 50, 5)
                casier = 1
        if casier == 1 :
            pyxel.rect(5,5, 50, 50, 5)
            
        #Personnage
            
        pyxel.rect(x,y, 20, 20, 11)
        pyxel.rect(x+19,y, 1, 1, 8) #un pixel a chaque angle pour faciliter les collisions
        pyxel.rect(x+19,y+19, 1, 1, 8)
        pyxel.rect(x,y+19, 1, 1, 8)
        
        #Limites de déplacement et couloir de sortie de la salle de classe
        
        pyxel.line(0,hmin,l,hmin,6)
        pyxel.line(0,hmax+20,l,hmax+20,6)
        pyxel.line(64,0,64,h,6)
        pyxel.line(64*8,0,64*8,h,6)
        
        #Bloc ennemi
            
        pyxel.rect(20*6,hmax-20, 16, 16, 9)
        pyxel.rect(20*7,hmax, 16, 16, 9)
        pyxel.rect(20*7,hmax-1*20, 16, 16, 9)
        pyxel.rect(20*7,hmax-2*20, 16, 16, 9)
        pyxel.rect(20*8,hmax-1*20, 16, 16, 9)
        pyxel.rect(20*9,hmax-3*20, 16, 16, 9)
        pyxel.rect(20*9,hmax-1*20, 16, 16, 9)
        pyxel.rect(20*10,hmax-0*20, 16, 16, 9)
        pyxel.rect(20*11,hmax-2*20, 16, 16, 9)
        pyxel.rect(20*11,hmax-3*20, 16, 16, 9)
        pyxel.rect(20*11,hmax-0*20, 16, 16, 9)
        pyxel.rect(20*12,hmax-0*20, 16, 16, 9)
        pyxel.rect(20*13,hmax-2*20, 16, 16, 9)
        pyxel.rect(20*14,hmax-2*20, 16, 16, 9)
        pyxel.rect(20*14,hmax-1*20, 16, 16, 9)
        pyxel.rect(20*15,hmax-3*20, 16, 16, 9)
        pyxel.rect(20*16,hmax-0*20, 16, 16, 9)
        pyxel.rect(20*16,hmax-1*20, 16, 16, 9)
        pyxel.rect(20*17,hmax-3*20, 16, 16, 9)
        pyxel.rect(20*17,hmax-1*20, 16, 16, 9)
        pyxel.rect(20*18,hmax-0*20, 16, 16, 9)
        pyxel.rect(20*19,hmax-1*20, 16, 16, 9)
        pyxel.rect(20*19,hmax-2*20, 16, 16, 9)
        pyxel.rect(20*19,hmax-1*20, 16, 16, 9)




pyxel.run(update, draw)

----------------------------------------------------------------------------

#Colisions, immobilisation et retour au début : 

import pyxel

pyxel.init(64, 64)

def update() :
    global 
    
    
    
    
def draw() :
    global
    
    

pyxel.run(update, draw)

----------------------------------------------------------------------------
#Code vide avec une fenétre de 64 :

import pyxel

pyxel.init(64, 64)

def update() :
    global 
    
    
    
    
def draw() :
    global
    
    

pyxel.run(update, draw)

----------------------------------------------------------------------------

import pyxel

pyxel.init(64, 64)

xennemi1 = 20 * 6
yennemi1 = hmax - 20

xennemi2 = 20 * 7
yennemi2 = hmax

xennemi3 = 20 * 6
yennemi3 = hmax - 20

def update() :
    global xennemi1,yennemi1,xennemi2,yennemi2
    
    #ennemi 1 :
    if niveau == 1 :
        if (x == xennemi1 or x+20 == xennemi1) and (y <= yennemi1 <= y+20) :
            niveau = 1
            x, y = 22, 22
        
        
    #ennemi 2 :
        if (x == xennemi2 or x+20 == xennemi2) and (y <= yennemi2 <= y+20) :
            x,y = 22, 185
            
    #ennemi 3 :
     if niveau == 2 :
        if (x == xennemi3 or x+20 == xennemi3) and (y <= yennemi3 <= y+20) :
            niveau = 1
            x, y = 22, 22
    
def draw():  #draw du programme principal
    global x, y, niveau, hmin, hmax, trentièmes, secondes, minutes, casier, m
    pyxel.cls(0)

    if niveau == 1:
        
        #obstacle niveau 1
        pyxel.rect(20 * 6, hmax - 20, 16, 16, 6)
        pyxel.rect(20 * 7, hmax, 16, 16, 6)
        
    elif niveau == 2:
        pyxel.line(0, hmin, l, hmin, 7)
        pyxel.line(0, hmax + 20, l, hmax + 20, 7)
        
        pyxel.rect(20 * 6, hmax - 20, 16, 16, 6)
                
    pyxel.rect(x, y, 20, 20, 11)


pyxel.run(update, draw)
pyxel.run(update,draw)
